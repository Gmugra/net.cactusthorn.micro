/*
 * This file is generated by jOOQ.
 */
package net.cactusthorn.micro.db.jooq;


import net.cactusthorn.micro.db.jooq.tables.Address;
import net.cactusthorn.micro.db.jooq.tables.Country;
import net.cactusthorn.micro.db.jooq.tables.Customer;
import net.cactusthorn.micro.db.jooq.tables.records.AddressRecord;
import net.cactusthorn.micro.db.jooq.tables.records.CountryRecord;
import net.cactusthorn.micro.db.jooq.tables.records.CustomerRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * the default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AddressRecord> CONSTRAINT_B = Internal.createUniqueKey(Address.ADDRESS, DSL.name("CONSTRAINT_B"), new TableField[] { Address.ADDRESS.ID }, true);
    public static final UniqueKey<CountryRecord> CONSTRAINT_3 = Internal.createUniqueKey(Country.COUNTRY, DSL.name("CONSTRAINT_3"), new TableField[] { Country.COUNTRY.ID }, true);
    public static final UniqueKey<CustomerRecord> CONSTRAINT_2 = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("CONSTRAINT_2"), new TableField[] { Customer.CUSTOMER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, CountryRecord> FK_ADDRESS_COUNTRY = Internal.createForeignKey(Address.ADDRESS, DSL.name("fk_address_country"), new TableField[] { Address.ADDRESS.COUNTRY_ID }, Keys.CONSTRAINT_3, new TableField[] { Country.COUNTRY.ID }, true);
    public static final ForeignKey<CustomerRecord, AddressRecord> FK_CUSTOMER_ADDRESS = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("fk_customer_address"), new TableField[] { Customer.CUSTOMER.ADDRESS_ID }, Keys.CONSTRAINT_B, new TableField[] { Address.ADDRESS.ID }, true);
}
