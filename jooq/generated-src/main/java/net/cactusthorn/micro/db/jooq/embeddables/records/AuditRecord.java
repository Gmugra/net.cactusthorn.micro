/*
 * This file is generated by jOOQ.
 */
package net.cactusthorn.micro.db.jooq.embeddables.records;


import java.time.LocalDateTime;

import net.cactusthorn.micro.db.jooq.tables.Address;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.EmbeddableRecordImpl;
import org.jooq.impl.Internal;


/**
 * The embeddable <code>PUBLIC.audit</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuditRecord extends EmbeddableRecordImpl<AuditRecord> implements Record2<LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>audit.created_on</code>.
     */
    public void setCreatedOn(LocalDateTime value) {
        set(0, value);
    }

    /**
     * Getter for <code>audit.created_on</code>.
     */
    public LocalDateTime getCreatedOn() {
        return (LocalDateTime) get(0);
    }

    /**
     * Setter for <code>audit.modified_on</code>.
     */
    public void setModifiedOn(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>audit.modified_on</code>.
     */
    public LocalDateTime getModifiedOn() {
        return (LocalDateTime) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<LocalDateTime, LocalDateTime> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<LocalDateTime> field1() {
        return (Field<LocalDateTime>) field(0);
    }

    @Override
    public Field<LocalDateTime> field2() {
        return (Field<LocalDateTime>) field(1);
    }

    @Override
    public LocalDateTime component1() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime component2() {
        return getModifiedOn();
    }

    @Override
    public LocalDateTime value1() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime value2() {
        return getModifiedOn();
    }

    @Override
    public AuditRecord value1(LocalDateTime value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public AuditRecord value2(LocalDateTime value) {
        setModifiedOn(value);
        return this;
    }

    @Override
    public AuditRecord values(LocalDateTime value1, LocalDateTime value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuditRecord
     */
    public AuditRecord() {
        super(Internal.fields(Address.ADDRESS.AUDIT));
    }

    /**
     * Create a detached, initialised AuditRecord
     */
    public AuditRecord(LocalDateTime createdOn, LocalDateTime modifiedOn) {
        this();

        setCreatedOn(createdOn);
        setModifiedOn(modifiedOn);
    }
}
