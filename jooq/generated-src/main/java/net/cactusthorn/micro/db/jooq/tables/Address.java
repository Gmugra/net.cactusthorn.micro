/*
 * This file is generated by jOOQ.
 */
package net.cactusthorn.micro.db.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import net.cactusthorn.micro.db.jooq.DefaultSchema;
import net.cactusthorn.micro.db.jooq.Keys;
import net.cactusthorn.micro.db.jooq.embeddables.records.AuditRecord;
import net.cactusthorn.micro.db.jooq.tables.records.AddressRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>address.id</code>.
     */
    public final TableField<AddressRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>address.country_id</code>.
     */
    public final TableField<AddressRecord, Integer> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>address.addres1</code>.
     */
    public final TableField<AddressRecord, String> ADDRES1 = createField(DSL.name("addres1"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>address.addres2</code>.
     */
    public final TableField<AddressRecord, String> ADDRES2 = createField(DSL.name("addres2"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>address.city</code>.
     */
    public final TableField<AddressRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>address.zip</code>.
     */
    public final TableField<AddressRecord, String> ZIP = createField(DSL.name("zip"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>address.created_on</code>.
     */
    public final TableField<AddressRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>address.modified_on</code>.
     */
    public final TableField<AddressRecord, LocalDateTime> MODIFIED_ON = createField(DSL.name("modified_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The embeddable type <code>audit</code>.
     */
    public final TableField<AddressRecord, AuditRecord> AUDIT = Internal.createEmbeddable(DSL.name("audit"), AuditRecord.class, false, this, CREATED_ON, MODIFIED_ON);

    private Address(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Address(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>address</code> table reference
     */
    public Address(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>address</code> table reference
     */
    public Address(Name alias) {
        this(alias, ADDRESS);
    }

    /**
     * Create a <code>address</code> table reference
     */
    public Address() {
        this(DSL.name("address"), null);
    }

    public <O extends Record> Address(Table<O> child, ForeignKey<O, AddressRecord> key) {
        super(child, key, ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AddressRecord, Integer> getIdentity() {
        return (Identity<AddressRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    @Override
    public List<UniqueKey<AddressRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressRecord>>asList(Keys.CONSTRAINT_B);
    }

    @Override
    public List<ForeignKey<AddressRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AddressRecord, ?>>asList(Keys.FK_ADDRESS_COUNTRY);
    }

    private transient Country _country;

    public Country country() {
        if (_country == null)
            _country = new Country(this, Keys.FK_ADDRESS_COUNTRY);

        return _country;
    }

    @Override
    public Address as(String alias) {
        return new Address(DSL.name(alias), this);
    }

    @Override
    public Address as(Name alias) {
        return new Address(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Name name) {
        return new Address(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
