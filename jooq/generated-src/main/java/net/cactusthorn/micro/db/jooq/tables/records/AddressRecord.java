/*
 * This file is generated by jOOQ.
 */
package net.cactusthorn.micro.db.jooq.tables.records;


import java.time.LocalDateTime;

import net.cactusthorn.micro.db.jooq.embeddables.records.AuditRecord;
import net.cactusthorn.micro.db.jooq.tables.Address;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressRecord extends UpdatableRecordImpl<AddressRecord> implements Record8<Integer, Integer, String, String, String, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>address.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>address.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>address.country_id</code>.
     */
    public void setCountryId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>address.country_id</code>.
     */
    public Integer getCountryId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>address.addres1</code>.
     */
    public void setAddres1(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>address.addres1</code>.
     */
    public String getAddres1() {
        return (String) get(2);
    }

    /**
     * Setter for <code>address.addres2</code>.
     */
    public void setAddres2(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>address.addres2</code>.
     */
    public String getAddres2() {
        return (String) get(3);
    }

    /**
     * Setter for <code>address.city</code>.
     */
    public void setCity(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>address.city</code>.
     */
    public String getCity() {
        return (String) get(4);
    }

    /**
     * Setter for <code>address.zip</code>.
     */
    public void setZip(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>address.zip</code>.
     */
    public String getZip() {
        return (String) get(5);
    }

    /**
     * Setter for the embeddable <code>audit</code>.
     */
    public void setAudit(AuditRecord value) {
        set(6, value.getCreatedOn());
        set(7, value.getModifiedOn());
    }

    /**
     * Getter for the embeddable <code>audit</code>.
     */
    public AuditRecord getAudit() {
        return new AuditRecord(
              (LocalDateTime) get(6)
            , (LocalDateTime) get(7)
        );
    }

    /**
     * Setter for <code>address.created_on</code>.
     */
    public void setCreatedOn(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>address.created_on</code>.
     */
    public LocalDateTime getCreatedOn() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>address.modified_on</code>.
     */
    public void setModifiedOn(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>address.modified_on</code>.
     */
    public LocalDateTime getModifiedOn() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, Integer, String, String, String, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Address.ADDRESS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Address.ADDRESS.COUNTRY_ID;
    }

    @Override
    public Field<String> field3() {
        return Address.ADDRESS.ADDRES1;
    }

    @Override
    public Field<String> field4() {
        return Address.ADDRESS.ADDRES2;
    }

    @Override
    public Field<String> field5() {
        return Address.ADDRESS.CITY;
    }

    @Override
    public Field<String> field6() {
        return Address.ADDRESS.ZIP;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Address.ADDRESS.CREATED_ON;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Address.ADDRESS.MODIFIED_ON;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getCountryId();
    }

    @Override
    public String component3() {
        return getAddres1();
    }

    @Override
    public String component4() {
        return getAddres2();
    }

    @Override
    public String component5() {
        return getCity();
    }

    @Override
    public String component6() {
        return getZip();
    }

    @Override
    public LocalDateTime component7() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime component8() {
        return getModifiedOn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getCountryId();
    }

    @Override
    public String value3() {
        return getAddres1();
    }

    @Override
    public String value4() {
        return getAddres2();
    }

    @Override
    public String value5() {
        return getCity();
    }

    @Override
    public String value6() {
        return getZip();
    }

    @Override
    public LocalDateTime value7() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime value8() {
        return getModifiedOn();
    }

    @Override
    public AddressRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AddressRecord value2(Integer value) {
        setCountryId(value);
        return this;
    }

    @Override
    public AddressRecord value3(String value) {
        setAddres1(value);
        return this;
    }

    @Override
    public AddressRecord value4(String value) {
        setAddres2(value);
        return this;
    }

    @Override
    public AddressRecord value5(String value) {
        setCity(value);
        return this;
    }

    @Override
    public AddressRecord value6(String value) {
        setZip(value);
        return this;
    }

    @Override
    public AddressRecord value7(LocalDateTime value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public AddressRecord value8(LocalDateTime value) {
        setModifiedOn(value);
        return this;
    }

    @Override
    public AddressRecord values(Integer value1, Integer value2, String value3, String value4, String value5, String value6, LocalDateTime value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AddressRecord
     */
    public AddressRecord() {
        super(Address.ADDRESS);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(Integer id, Integer countryId, String addres1, String addres2, String city, String zip, LocalDateTime createdOn, LocalDateTime modifiedOn) {
        super(Address.ADDRESS);

        setId(id);
        setCountryId(countryId);
        setAddres1(addres1);
        setAddres2(addres2);
        setCity(city);
        setZip(zip);
        setCreatedOn(createdOn);
        setModifiedOn(modifiedOn);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(Integer id, Integer countryId, String addres1, String addres2, String city, String zip, AuditRecord audit) {
        super(Address.ADDRESS);

        setId(id);
        setCountryId(countryId);
        setAddres1(addres1);
        setAddres2(addres2);
        setCity(city);
        setZip(zip);
        setAudit(audit);
    }
}
