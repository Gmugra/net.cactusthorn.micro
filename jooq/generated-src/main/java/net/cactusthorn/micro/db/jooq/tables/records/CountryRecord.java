/*
 * This file is generated by jOOQ.
 */
package net.cactusthorn.micro.db.jooq.tables.records;


import java.time.LocalDateTime;

import net.cactusthorn.micro.db.jooq.embeddables.records.AuditRecord;
import net.cactusthorn.micro.db.jooq.tables.Country;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryRecord extends UpdatableRecordImpl<CountryRecord> implements Record5<Integer, String, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>country.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>country.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>country.alpha2</code>.
     */
    public void setAlpha2(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>country.alpha2</code>.
     */
    public String getAlpha2() {
        return (String) get(1);
    }

    /**
     * Setter for <code>country.alpha3</code>.
     */
    public void setAlpha3(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>country.alpha3</code>.
     */
    public String getAlpha3() {
        return (String) get(2);
    }

    /**
     * Setter for the embeddable <code>audit</code>.
     */
    public void setAudit(AuditRecord value) {
        set(3, value.getCreatedOn());
        set(4, value.getModifiedOn());
    }

    /**
     * Getter for the embeddable <code>audit</code>.
     */
    public AuditRecord getAudit() {
        return new AuditRecord(
              (LocalDateTime) get(3)
            , (LocalDateTime) get(4)
        );
    }

    /**
     * Setter for <code>country.created_on</code>.
     */
    public void setCreatedOn(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>country.created_on</code>.
     */
    public LocalDateTime getCreatedOn() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>country.modified_on</code>.
     */
    public void setModifiedOn(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>country.modified_on</code>.
     */
    public LocalDateTime getModifiedOn() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, String, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Country.COUNTRY.ID;
    }

    @Override
    public Field<String> field2() {
        return Country.COUNTRY.ALPHA2;
    }

    @Override
    public Field<String> field3() {
        return Country.COUNTRY.ALPHA3;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Country.COUNTRY.CREATED_ON;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Country.COUNTRY.MODIFIED_ON;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAlpha2();
    }

    @Override
    public String component3() {
        return getAlpha3();
    }

    @Override
    public LocalDateTime component4() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime component5() {
        return getModifiedOn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAlpha2();
    }

    @Override
    public String value3() {
        return getAlpha3();
    }

    @Override
    public LocalDateTime value4() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime value5() {
        return getModifiedOn();
    }

    @Override
    public CountryRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CountryRecord value2(String value) {
        setAlpha2(value);
        return this;
    }

    @Override
    public CountryRecord value3(String value) {
        setAlpha3(value);
        return this;
    }

    @Override
    public CountryRecord value4(LocalDateTime value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public CountryRecord value5(LocalDateTime value) {
        setModifiedOn(value);
        return this;
    }

    @Override
    public CountryRecord values(Integer value1, String value2, String value3, LocalDateTime value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CountryRecord
     */
    public CountryRecord() {
        super(Country.COUNTRY);
    }

    /**
     * Create a detached, initialised CountryRecord
     */
    public CountryRecord(Integer id, String alpha2, String alpha3, LocalDateTime createdOn, LocalDateTime modifiedOn) {
        super(Country.COUNTRY);

        setId(id);
        setAlpha2(alpha2);
        setAlpha3(alpha3);
        setCreatedOn(createdOn);
        setModifiedOn(modifiedOn);
    }

    /**
     * Create a detached, initialised CountryRecord
     */
    public CountryRecord(Integer id, String alpha2, String alpha3, AuditRecord audit) {
        super(Country.COUNTRY);

        setId(id);
        setAlpha2(alpha2);
        setAlpha3(alpha3);
        setAudit(audit);
    }
}
